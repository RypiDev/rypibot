import { Colors, EmbedBuilder, hyperlink } from 'discord.js'

import { ASSETS } from '../utils/Assets'

export enum EmbedEnum {
  REGLEMENT_EMBED = 0
}

const REGLEMENT_EMBEDS = [
  new EmbedBuilder().setColor(Colors.Blue).setImage(ASSETS.REGLEMENT.PATH),
  new EmbedBuilder()
    .setColor(Colors.DarkButNotBlack)
    .setDescription(
      '> ðŸ“œ Comme sur toute plateforme, il est important de respecter quelques rÃ¨gles pour conserver une ambiance saine et plaisante pour tous.'
    )
    .addFields(
      { name: '\n', value: '\n' },
      {
        name: 'ðŸ”¹ 1. RÃ¨gles de vie en communautÃ©',
        value: `- Respecter la totalitÃ© des ${hyperlink(
          'TOS',
          'https://discord.com/terms'
        )} et les ${hyperlink(
          'Community Guidelines',
          'https://discord.com/guidelines'
        )} de Discord. \n - Un comportement respectueux est demandÃ© pour chaque membre. \n - Tout type de nuisance Ã  la vie du serveur (spam, mention abusive, dÃ©nigrement des artistes) se verra sanctionnÃ©. \n - Les dÃ©bats autour de sujets jugÃ©s sensibles par notre Ã©quipe staff se verra interdit et sanctionnÃ© si abus. \n - Un comportement nuisible et l'utilisation de Soundboard abusivement en vocal sont bannissables. \n - Les promotions de services payantes de toutes sortes sont strictement interdites au sein du serveur.`
      },
      { name: '\n', value: '\n' },
      {
        name: "ðŸ”¹ 2. RÃ¨gles du partage d'informations",
        value:
          "- Il est interdit de donner des liens que ce soit en message privÃ© ou dans un salon qui amÃ¨nent vers des sites frauduleux ou des tÃ©lÃ©chargements illÃ©gaux ou Ã  caractÃ¨re pornographique. \n - Les publicitÃ©s en message privÃ© sont interdites, un salon dÃ©diÃ© Ã  la pub est Ã  votre disposition uniquement pour puber son rÃ©tro. \n - La propagation d'informations privÃ©es ou personnelles se verra sanctionnÃ©e sÃ©vÃ¨rement. \n - S'approprier tout code open-source de RypÃ® sous tout autres noms au public sera dÃ©finitivement banni de ce serveur."
      }
    )
]

export const getEmbed = (type: string): EmbedBuilder[] => {
  switch (type) {
    case String(EmbedEnum.REGLEMENT_EMBED):
      return REGLEMENT_EMBEDS
    default:
      return [new EmbedBuilder()]
  }
}
